datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  username String   @unique
  email    String   @unique
  password String
  teacher  Teacher?
}

model Teacher {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  userId       String         @unique @db.ObjectId
  user         User           @relation(fields: [userId], references: [id])
  classTeacher ClassTeacher[]
  appointments Appointment[]
  lessons      Lesson[]
}

model Student {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  username String @unique
  class   Class  @relation(fields: [classId], references: [id])
  classId String @db.ObjectId

  @@index([classId])
}

model Class {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String         @unique
  classTeacher  ClassTeacher[]
  lessons       Lesson[]
  students      Student[]
}

model ClassTeacher {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  classId    String @db.ObjectId
  teacherId  String @db.ObjectId
  class      Class  @relation(fields: [classId], references: [id])
  teacher    Teacher @relation(fields: [teacherId], references: [id])

  @@unique([classId, teacherId])
}


model Lesson {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  classId       String @db.ObjectId
  teacherId     String @db.ObjectId
  title         String
  start_time    DateTime
  end_time      DateTime
  room          String
  lesson_type   String
  homework      String?
  lesson_goals  String?
  subject       String
  public_notes  String?
  private_notes String?
  files         File[]
  class        Class  @relation(fields: [classId], references: [id])
  teacher      Teacher @relation(fields: [teacherId], references: [id])

  @@index([classId, teacherId])
}

model File {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  lessonId   String @db.ObjectId
  file_name   String
  file_type   String
  binary_file Bytes
  visibility  Boolean
  lesson      Lesson  @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@index([lessonId])
}

model Appointment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  teacherId String @db.ObjectId
  title     String
  start_time DateTime
  end_time   DateTime
  notes     String?
  location  String?
  teacher   Teacher  @relation(fields: [teacherId], references: [id])

  @@index([teacherId])
}